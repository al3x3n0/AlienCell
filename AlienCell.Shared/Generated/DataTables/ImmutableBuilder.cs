// <auto-generated />
#pragma warning disable CS0105
/* Generated/Data/AchievementData.cs */
using System.Collections.Generic;
/* Generated/Data/AffinityData.cs */
using System.Collections.Generic;
/* Generated/Data/ArtifactData.cs */
using System.Collections.Generic;
/* Generated/Data/ArtifactLadderData.cs */
using System.Collections.Generic;
/* Generated/Data/ArtifactUpgradeMaterialData.cs */
using System.Collections.Generic;
/* Generated/Data/BuildingData.cs */
using System.Collections.Generic;
/* Generated/Data/CurrencyData.cs */
using System.Collections.Generic;
/* Generated/Data/ExpeditionData.cs */
using System.Collections.Generic;
/* Generated/Data/FactionData.cs */
using System.Collections.Generic;
/* Generated/Data/HeroClassData.cs */
using System.Collections.Generic;
/* Generated/Data/HeroData.cs */
using System.Collections.Generic;
/* Generated/Data/HeroLadderData.cs */
using System.Collections.Generic;
/* Generated/Data/HeroSkinData.cs */
using System.Collections.Generic;
/* Generated/Data/HeroUpgradeMaterialData.cs */
using System.Collections.Generic;
/* Generated/Data/HeroWeaponSlotData.cs */
using System.Collections.Generic;
/* Generated/Data/QualityData.cs */
using System.Collections.Generic;
/* Generated/Data/SkillData.cs */
using System.Collections.Generic;
/* Generated/Data/WeaponData.cs */
using System.Collections.Generic;
/* Generated/Data/WeaponLadderData.cs */
using System.Collections.Generic;
/* Generated/Data/WeaponUpgradeMaterialData.cs */
using System.Collections.Generic;
using AlienCell.Shared.Data;
using AlienCell.Shared.Structs;
using MasterMemory.Validation;
using MasterMemory;
using System.Collections.Generic;
using System;
using AlienCell.Shared.Data.Tables;

namespace AlienCell.Shared.Data
{
   public sealed class ImmutableBuilder : ImmutableBuilderBase
   {
        MemoryDatabase memory;

        public ImmutableBuilder(MemoryDatabase memory)
        {
            this.memory = memory;
        }

        public MemoryDatabase Build()
        {
            return memory;
        }

        public void ReplaceAll(System.Collections.Generic.IList<AchievementData> data)
        {
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new AchievementDataTable(newData);
            memory = new MemoryDatabase(
                table,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void RemoveAchievementData(int[] keys)
        {
            var data = RemoveCore(memory.AchievementDataTable.GetRawDataUnsafe(), keys, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new AchievementDataTable(newData);
            memory = new MemoryDatabase(
                table,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void Diff(AchievementData[] addOrReplaceData)
        {
            var data = DiffCore(memory.AchievementDataTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new AchievementDataTable(newData);
            memory = new MemoryDatabase(
                table,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<AffinityData> data)
        {
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new AffinityDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                table,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void RemoveAffinityData(int[] keys)
        {
            var data = RemoveCore(memory.AffinityDataTable.GetRawDataUnsafe(), keys, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new AffinityDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                table,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void Diff(AffinityData[] addOrReplaceData)
        {
            var data = DiffCore(memory.AffinityDataTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new AffinityDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                table,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<ArtifactData> data)
        {
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new ArtifactDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                table,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void RemoveArtifactData(int[] keys)
        {
            var data = RemoveCore(memory.ArtifactDataTable.GetRawDataUnsafe(), keys, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new ArtifactDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                table,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void Diff(ArtifactData[] addOrReplaceData)
        {
            var data = DiffCore(memory.ArtifactDataTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new ArtifactDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                table,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<ArtifactLadderData> data)
        {
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new ArtifactLadderDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                table,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void RemoveArtifactLadderData(int[] keys)
        {
            var data = RemoveCore(memory.ArtifactLadderDataTable.GetRawDataUnsafe(), keys, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new ArtifactLadderDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                table,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void Diff(ArtifactLadderData[] addOrReplaceData)
        {
            var data = DiffCore(memory.ArtifactLadderDataTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new ArtifactLadderDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                table,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<ArtifactUpgradeMaterialData> data)
        {
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new ArtifactUpgradeMaterialDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                table,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void RemoveArtifactUpgradeMaterialData(int[] keys)
        {
            var data = RemoveCore(memory.ArtifactUpgradeMaterialDataTable.GetRawDataUnsafe(), keys, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new ArtifactUpgradeMaterialDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                table,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void Diff(ArtifactUpgradeMaterialData[] addOrReplaceData)
        {
            var data = DiffCore(memory.ArtifactUpgradeMaterialDataTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new ArtifactUpgradeMaterialDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                table,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<BuildingData> data)
        {
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new BuildingDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                table,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void RemoveBuildingData(int[] keys)
        {
            var data = RemoveCore(memory.BuildingDataTable.GetRawDataUnsafe(), keys, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new BuildingDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                table,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void Diff(BuildingData[] addOrReplaceData)
        {
            var data = DiffCore(memory.BuildingDataTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new BuildingDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                table,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<CurrencyData> data)
        {
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new CurrencyDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                table,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void RemoveCurrencyData(int[] keys)
        {
            var data = RemoveCore(memory.CurrencyDataTable.GetRawDataUnsafe(), keys, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new CurrencyDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                table,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void Diff(CurrencyData[] addOrReplaceData)
        {
            var data = DiffCore(memory.CurrencyDataTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new CurrencyDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                table,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<ExpeditionData> data)
        {
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new ExpeditionDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                table,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void RemoveExpeditionData(int[] keys)
        {
            var data = RemoveCore(memory.ExpeditionDataTable.GetRawDataUnsafe(), keys, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new ExpeditionDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                table,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void Diff(ExpeditionData[] addOrReplaceData)
        {
            var data = DiffCore(memory.ExpeditionDataTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new ExpeditionDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                table,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<FactionData> data)
        {
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new FactionDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                table,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void RemoveFactionData(int[] keys)
        {
            var data = RemoveCore(memory.FactionDataTable.GetRawDataUnsafe(), keys, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new FactionDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                table,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void Diff(FactionData[] addOrReplaceData)
        {
            var data = DiffCore(memory.FactionDataTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new FactionDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                table,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<HeroClassData> data)
        {
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new HeroClassDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                table,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void RemoveHeroClassData(int[] keys)
        {
            var data = RemoveCore(memory.HeroClassDataTable.GetRawDataUnsafe(), keys, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new HeroClassDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                table,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void Diff(HeroClassData[] addOrReplaceData)
        {
            var data = DiffCore(memory.HeroClassDataTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new HeroClassDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                table,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<HeroData> data)
        {
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new HeroDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                table,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void RemoveHeroData(int[] keys)
        {
            var data = RemoveCore(memory.HeroDataTable.GetRawDataUnsafe(), keys, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new HeroDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                table,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void Diff(HeroData[] addOrReplaceData)
        {
            var data = DiffCore(memory.HeroDataTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new HeroDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                table,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<HeroLadderData> data)
        {
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new HeroLadderDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                table,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void RemoveHeroLadderData(int[] keys)
        {
            var data = RemoveCore(memory.HeroLadderDataTable.GetRawDataUnsafe(), keys, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new HeroLadderDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                table,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void Diff(HeroLadderData[] addOrReplaceData)
        {
            var data = DiffCore(memory.HeroLadderDataTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new HeroLadderDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                table,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<HeroSkinData> data)
        {
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new HeroSkinDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                table,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void RemoveHeroSkinData(int[] keys)
        {
            var data = RemoveCore(memory.HeroSkinDataTable.GetRawDataUnsafe(), keys, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new HeroSkinDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                table,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void Diff(HeroSkinData[] addOrReplaceData)
        {
            var data = DiffCore(memory.HeroSkinDataTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new HeroSkinDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                table,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<HeroUpgradeMaterialData> data)
        {
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new HeroUpgradeMaterialDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                table,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void RemoveHeroUpgradeMaterialData(int[] keys)
        {
            var data = RemoveCore(memory.HeroUpgradeMaterialDataTable.GetRawDataUnsafe(), keys, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new HeroUpgradeMaterialDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                table,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void Diff(HeroUpgradeMaterialData[] addOrReplaceData)
        {
            var data = DiffCore(memory.HeroUpgradeMaterialDataTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new HeroUpgradeMaterialDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                table,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<HeroWeaponSlotData> data)
        {
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new HeroWeaponSlotDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                table,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void RemoveHeroWeaponSlotData(int[] keys)
        {
            var data = RemoveCore(memory.HeroWeaponSlotDataTable.GetRawDataUnsafe(), keys, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new HeroWeaponSlotDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                table,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void Diff(HeroWeaponSlotData[] addOrReplaceData)
        {
            var data = DiffCore(memory.HeroWeaponSlotDataTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new HeroWeaponSlotDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                table,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<QualityData> data)
        {
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new QualityDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                table,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void RemoveQualityData(int[] keys)
        {
            var data = RemoveCore(memory.QualityDataTable.GetRawDataUnsafe(), keys, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new QualityDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                table,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void Diff(QualityData[] addOrReplaceData)
        {
            var data = DiffCore(memory.QualityDataTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new QualityDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                table,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<SkillData> data)
        {
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new SkillDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                table,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void RemoveSkillData(int[] keys)
        {
            var data = RemoveCore(memory.SkillDataTable.GetRawDataUnsafe(), keys, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new SkillDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                table,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void Diff(SkillData[] addOrReplaceData)
        {
            var data = DiffCore(memory.SkillDataTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new SkillDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                table,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<WeaponData> data)
        {
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new WeaponDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                table,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void RemoveWeaponData(int[] keys)
        {
            var data = RemoveCore(memory.WeaponDataTable.GetRawDataUnsafe(), keys, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new WeaponDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                table,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void Diff(WeaponData[] addOrReplaceData)
        {
            var data = DiffCore(memory.WeaponDataTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new WeaponDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                table,
                memory.WeaponLadderDataTable,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<WeaponLadderData> data)
        {
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new WeaponLadderDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                table,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void RemoveWeaponLadderData(int[] keys)
        {
            var data = RemoveCore(memory.WeaponLadderDataTable.GetRawDataUnsafe(), keys, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new WeaponLadderDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                table,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void Diff(WeaponLadderData[] addOrReplaceData)
        {
            var data = DiffCore(memory.WeaponLadderDataTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new WeaponLadderDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                table,
                memory.WeaponUpgradeMaterialDataTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<WeaponUpgradeMaterialData> data)
        {
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new WeaponUpgradeMaterialDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                table
            
            );
        }

        public void RemoveWeaponUpgradeMaterialData(int[] keys)
        {
            var data = RemoveCore(memory.WeaponUpgradeMaterialDataTable.GetRawDataUnsafe(), keys, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new WeaponUpgradeMaterialDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                table
            
            );
        }

        public void Diff(WeaponUpgradeMaterialData[] addOrReplaceData)
        {
            var data = DiffCore(memory.WeaponUpgradeMaterialDataTable.GetRawDataUnsafe(), addOrReplaceData, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var newData = CloneAndSortBy(data, x => x.Id, System.Collections.Generic.Comparer<int>.Default);
            var table = new WeaponUpgradeMaterialDataTable(newData);
            memory = new MemoryDatabase(
                memory.AchievementDataTable,
                memory.AffinityDataTable,
                memory.ArtifactDataTable,
                memory.ArtifactLadderDataTable,
                memory.ArtifactUpgradeMaterialDataTable,
                memory.BuildingDataTable,
                memory.CurrencyDataTable,
                memory.ExpeditionDataTable,
                memory.FactionDataTable,
                memory.HeroClassDataTable,
                memory.HeroDataTable,
                memory.HeroLadderDataTable,
                memory.HeroSkinDataTable,
                memory.HeroUpgradeMaterialDataTable,
                memory.HeroWeaponSlotDataTable,
                memory.QualityDataTable,
                memory.SkillDataTable,
                memory.WeaponDataTable,
                memory.WeaponLadderDataTable,
                table
            
            );
        }

    }
}