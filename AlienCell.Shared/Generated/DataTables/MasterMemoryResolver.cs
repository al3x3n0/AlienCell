// <auto-generated />
#pragma warning disable CS0105
/* Generated/Data/AchievementData.cs */
using MasterMemory;
/* Generated/Data/AffinityData.cs */
using MasterMemory;
/* Generated/Data/ArtifactData.cs */
using MasterMemory;
/* Generated/Data/ArtifactLadderData.cs */
using MasterMemory;
/* Generated/Data/ArtifactUpgradeMaterialData.cs */
using MasterMemory;
/* Generated/Data/BuildingData.cs */
using MasterMemory;
/* Generated/Data/CurrencyData.cs */
using MasterMemory;
/* Generated/Data/ExpeditionData.cs */
using MasterMemory;
/* Generated/Data/FactionData.cs */
using MasterMemory;
/* Generated/Data/HeroClassData.cs */
using MasterMemory;
/* Generated/Data/HeroData.cs */
using MasterMemory;
/* Generated/Data/HeroLadderData.cs */
using MasterMemory;
/* Generated/Data/HeroSkinData.cs */
using MasterMemory;
/* Generated/Data/HeroUpgradeMaterialData.cs */
using MasterMemory;
/* Generated/Data/HeroWeaponSlotData.cs */
using MasterMemory;
/* Generated/Data/QualityData.cs */
using MasterMemory;
/* Generated/Data/SkillData.cs */
using MasterMemory;
/* Generated/Data/WeaponData.cs */
using MasterMemory;
/* Generated/Data/WeaponLadderData.cs */
using MasterMemory;
/* Generated/Data/WeaponUpgradeMaterialData.cs */
using MasterMemory;
using AlienCell.Shared.Data;
using AlienCell.Shared.Structs;
using MasterMemory.Validation;
using MasterMemory;
using System.Collections.Generic;
using System;
using AlienCell.Shared.Data.Tables;

namespace AlienCell.Shared.Data
{
    public class MasterMemoryResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new MasterMemoryResolver();

        MasterMemoryResolver()
        {

        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.formatter;
        }

        static class FormatterCache<T>
        {
            public static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> formatter;

            static FormatterCache()
            {
                var f = MasterMemoryResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class MasterMemoryResolverGetFormatterHelper
    {
        static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static MasterMemoryResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(20)
            {
                {typeof(AchievementData[]), 0 },
                {typeof(AffinityData[]), 1 },
                {typeof(ArtifactData[]), 2 },
                {typeof(ArtifactLadderData[]), 3 },
                {typeof(ArtifactUpgradeMaterialData[]), 4 },
                {typeof(BuildingData[]), 5 },
                {typeof(CurrencyData[]), 6 },
                {typeof(ExpeditionData[]), 7 },
                {typeof(FactionData[]), 8 },
                {typeof(HeroClassData[]), 9 },
                {typeof(HeroData[]), 10 },
                {typeof(HeroLadderData[]), 11 },
                {typeof(HeroSkinData[]), 12 },
                {typeof(HeroUpgradeMaterialData[]), 13 },
                {typeof(HeroWeaponSlotData[]), 14 },
                {typeof(QualityData[]), 15 },
                {typeof(SkillData[]), 16 },
                {typeof(WeaponData[]), 17 },
                {typeof(WeaponLadderData[]), 18 },
                {typeof(WeaponUpgradeMaterialData[]), 19 },
            };
        }

        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key)) return null;

            switch (key)
            {
                case 0: return new MessagePack.Formatters.ArrayFormatter<AchievementData>();
                case 1: return new MessagePack.Formatters.ArrayFormatter<AffinityData>();
                case 2: return new MessagePack.Formatters.ArrayFormatter<ArtifactData>();
                case 3: return new MessagePack.Formatters.ArrayFormatter<ArtifactLadderData>();
                case 4: return new MessagePack.Formatters.ArrayFormatter<ArtifactUpgradeMaterialData>();
                case 5: return new MessagePack.Formatters.ArrayFormatter<BuildingData>();
                case 6: return new MessagePack.Formatters.ArrayFormatter<CurrencyData>();
                case 7: return new MessagePack.Formatters.ArrayFormatter<ExpeditionData>();
                case 8: return new MessagePack.Formatters.ArrayFormatter<FactionData>();
                case 9: return new MessagePack.Formatters.ArrayFormatter<HeroClassData>();
                case 10: return new MessagePack.Formatters.ArrayFormatter<HeroData>();
                case 11: return new MessagePack.Formatters.ArrayFormatter<HeroLadderData>();
                case 12: return new MessagePack.Formatters.ArrayFormatter<HeroSkinData>();
                case 13: return new MessagePack.Formatters.ArrayFormatter<HeroUpgradeMaterialData>();
                case 14: return new MessagePack.Formatters.ArrayFormatter<HeroWeaponSlotData>();
                case 15: return new MessagePack.Formatters.ArrayFormatter<QualityData>();
                case 16: return new MessagePack.Formatters.ArrayFormatter<SkillData>();
                case 17: return new MessagePack.Formatters.ArrayFormatter<WeaponData>();
                case 18: return new MessagePack.Formatters.ArrayFormatter<WeaponLadderData>();
                case 19: return new MessagePack.Formatters.ArrayFormatter<WeaponUpgradeMaterialData>();
                default: return null;
            }
        }
    }
}