// <auto-generated />
#pragma warning disable CS0105
/* Generated/Data/AchievementData.cs */
using System.Collections.Generic;
/* Generated/Data/AffinityData.cs */
using System.Collections.Generic;
/* Generated/Data/ArtifactData.cs */
using System.Collections.Generic;
/* Generated/Data/ArtifactLadderData.cs */
using System.Collections.Generic;
/* Generated/Data/ArtifactUpgradeMaterialData.cs */
using System.Collections.Generic;
/* Generated/Data/BuildingData.cs */
using System.Collections.Generic;
/* Generated/Data/CurrencyData.cs */
using System.Collections.Generic;
/* Generated/Data/ExpeditionData.cs */
using System.Collections.Generic;
/* Generated/Data/FactionData.cs */
using System.Collections.Generic;
/* Generated/Data/HeroClassData.cs */
using System.Collections.Generic;
/* Generated/Data/HeroData.cs */
using System.Collections.Generic;
/* Generated/Data/HeroLadderData.cs */
using System.Collections.Generic;
/* Generated/Data/HeroSkinData.cs */
using System.Collections.Generic;
/* Generated/Data/HeroUpgradeMaterialData.cs */
using System.Collections.Generic;
/* Generated/Data/HeroWeaponSlotData.cs */
using System.Collections.Generic;
/* Generated/Data/QualityData.cs */
using System.Collections.Generic;
/* Generated/Data/SkillData.cs */
using System.Collections.Generic;
/* Generated/Data/WeaponData.cs */
using System.Collections.Generic;
/* Generated/Data/WeaponLadderData.cs */
using System.Collections.Generic;
/* Generated/Data/WeaponUpgradeMaterialData.cs */
using System.Collections.Generic;
using AlienCell.Shared.Data;
using AlienCell.Shared.Structs;
using MasterMemory.Validation;
using MasterMemory;
using System.Collections.Generic;
using System;
using AlienCell.Shared.Data.Tables;

namespace AlienCell.Shared.Data
{
   public sealed class MemoryDatabase : MemoryDatabaseBase
   {
        public AchievementDataTable AchievementDataTable { get; private set; }
        public AffinityDataTable AffinityDataTable { get; private set; }
        public ArtifactDataTable ArtifactDataTable { get; private set; }
        public ArtifactLadderDataTable ArtifactLadderDataTable { get; private set; }
        public ArtifactUpgradeMaterialDataTable ArtifactUpgradeMaterialDataTable { get; private set; }
        public BuildingDataTable BuildingDataTable { get; private set; }
        public CurrencyDataTable CurrencyDataTable { get; private set; }
        public ExpeditionDataTable ExpeditionDataTable { get; private set; }
        public FactionDataTable FactionDataTable { get; private set; }
        public HeroClassDataTable HeroClassDataTable { get; private set; }
        public HeroDataTable HeroDataTable { get; private set; }
        public HeroLadderDataTable HeroLadderDataTable { get; private set; }
        public HeroSkinDataTable HeroSkinDataTable { get; private set; }
        public HeroUpgradeMaterialDataTable HeroUpgradeMaterialDataTable { get; private set; }
        public HeroWeaponSlotDataTable HeroWeaponSlotDataTable { get; private set; }
        public QualityDataTable QualityDataTable { get; private set; }
        public SkillDataTable SkillDataTable { get; private set; }
        public WeaponDataTable WeaponDataTable { get; private set; }
        public WeaponLadderDataTable WeaponLadderDataTable { get; private set; }
        public WeaponUpgradeMaterialDataTable WeaponUpgradeMaterialDataTable { get; private set; }

        public MemoryDatabase(
            AchievementDataTable AchievementDataTable,
            AffinityDataTable AffinityDataTable,
            ArtifactDataTable ArtifactDataTable,
            ArtifactLadderDataTable ArtifactLadderDataTable,
            ArtifactUpgradeMaterialDataTable ArtifactUpgradeMaterialDataTable,
            BuildingDataTable BuildingDataTable,
            CurrencyDataTable CurrencyDataTable,
            ExpeditionDataTable ExpeditionDataTable,
            FactionDataTable FactionDataTable,
            HeroClassDataTable HeroClassDataTable,
            HeroDataTable HeroDataTable,
            HeroLadderDataTable HeroLadderDataTable,
            HeroSkinDataTable HeroSkinDataTable,
            HeroUpgradeMaterialDataTable HeroUpgradeMaterialDataTable,
            HeroWeaponSlotDataTable HeroWeaponSlotDataTable,
            QualityDataTable QualityDataTable,
            SkillDataTable SkillDataTable,
            WeaponDataTable WeaponDataTable,
            WeaponLadderDataTable WeaponLadderDataTable,
            WeaponUpgradeMaterialDataTable WeaponUpgradeMaterialDataTable
        )
        {
            this.AchievementDataTable = AchievementDataTable;
            this.AffinityDataTable = AffinityDataTable;
            this.ArtifactDataTable = ArtifactDataTable;
            this.ArtifactLadderDataTable = ArtifactLadderDataTable;
            this.ArtifactUpgradeMaterialDataTable = ArtifactUpgradeMaterialDataTable;
            this.BuildingDataTable = BuildingDataTable;
            this.CurrencyDataTable = CurrencyDataTable;
            this.ExpeditionDataTable = ExpeditionDataTable;
            this.FactionDataTable = FactionDataTable;
            this.HeroClassDataTable = HeroClassDataTable;
            this.HeroDataTable = HeroDataTable;
            this.HeroLadderDataTable = HeroLadderDataTable;
            this.HeroSkinDataTable = HeroSkinDataTable;
            this.HeroUpgradeMaterialDataTable = HeroUpgradeMaterialDataTable;
            this.HeroWeaponSlotDataTable = HeroWeaponSlotDataTable;
            this.QualityDataTable = QualityDataTable;
            this.SkillDataTable = SkillDataTable;
            this.WeaponDataTable = WeaponDataTable;
            this.WeaponLadderDataTable = WeaponLadderDataTable;
            this.WeaponUpgradeMaterialDataTable = WeaponUpgradeMaterialDataTable;
        }

        public MemoryDatabase(byte[] databaseBinary, bool internString = true, MessagePack.IFormatterResolver formatterResolver = null, int maxDegreeOfParallelism = 1)
            : base(databaseBinary, internString, formatterResolver, maxDegreeOfParallelism)
        {
        }

        protected override void Init(Dictionary<string, (int offset, int count)> header, System.ReadOnlyMemory<byte> databaseBinary, MessagePack.MessagePackSerializerOptions options, int maxDegreeOfParallelism)
        {
            if(maxDegreeOfParallelism == 1)
            {
                InitSequential(header, databaseBinary, options, maxDegreeOfParallelism);
            }
            else
            {
                InitParallel(header, databaseBinary, options, maxDegreeOfParallelism);
            }
        }

        void InitSequential(Dictionary<string, (int offset, int count)> header, System.ReadOnlyMemory<byte> databaseBinary, MessagePack.MessagePackSerializerOptions options, int maxDegreeOfParallelism)
        {
            this.AchievementDataTable = ExtractTableData<AchievementData, AchievementDataTable>(header, databaseBinary, options, xs => new AchievementDataTable(xs));
            this.AffinityDataTable = ExtractTableData<AffinityData, AffinityDataTable>(header, databaseBinary, options, xs => new AffinityDataTable(xs));
            this.ArtifactDataTable = ExtractTableData<ArtifactData, ArtifactDataTable>(header, databaseBinary, options, xs => new ArtifactDataTable(xs));
            this.ArtifactLadderDataTable = ExtractTableData<ArtifactLadderData, ArtifactLadderDataTable>(header, databaseBinary, options, xs => new ArtifactLadderDataTable(xs));
            this.ArtifactUpgradeMaterialDataTable = ExtractTableData<ArtifactUpgradeMaterialData, ArtifactUpgradeMaterialDataTable>(header, databaseBinary, options, xs => new ArtifactUpgradeMaterialDataTable(xs));
            this.BuildingDataTable = ExtractTableData<BuildingData, BuildingDataTable>(header, databaseBinary, options, xs => new BuildingDataTable(xs));
            this.CurrencyDataTable = ExtractTableData<CurrencyData, CurrencyDataTable>(header, databaseBinary, options, xs => new CurrencyDataTable(xs));
            this.ExpeditionDataTable = ExtractTableData<ExpeditionData, ExpeditionDataTable>(header, databaseBinary, options, xs => new ExpeditionDataTable(xs));
            this.FactionDataTable = ExtractTableData<FactionData, FactionDataTable>(header, databaseBinary, options, xs => new FactionDataTable(xs));
            this.HeroClassDataTable = ExtractTableData<HeroClassData, HeroClassDataTable>(header, databaseBinary, options, xs => new HeroClassDataTable(xs));
            this.HeroDataTable = ExtractTableData<HeroData, HeroDataTable>(header, databaseBinary, options, xs => new HeroDataTable(xs));
            this.HeroLadderDataTable = ExtractTableData<HeroLadderData, HeroLadderDataTable>(header, databaseBinary, options, xs => new HeroLadderDataTable(xs));
            this.HeroSkinDataTable = ExtractTableData<HeroSkinData, HeroSkinDataTable>(header, databaseBinary, options, xs => new HeroSkinDataTable(xs));
            this.HeroUpgradeMaterialDataTable = ExtractTableData<HeroUpgradeMaterialData, HeroUpgradeMaterialDataTable>(header, databaseBinary, options, xs => new HeroUpgradeMaterialDataTable(xs));
            this.HeroWeaponSlotDataTable = ExtractTableData<HeroWeaponSlotData, HeroWeaponSlotDataTable>(header, databaseBinary, options, xs => new HeroWeaponSlotDataTable(xs));
            this.QualityDataTable = ExtractTableData<QualityData, QualityDataTable>(header, databaseBinary, options, xs => new QualityDataTable(xs));
            this.SkillDataTable = ExtractTableData<SkillData, SkillDataTable>(header, databaseBinary, options, xs => new SkillDataTable(xs));
            this.WeaponDataTable = ExtractTableData<WeaponData, WeaponDataTable>(header, databaseBinary, options, xs => new WeaponDataTable(xs));
            this.WeaponLadderDataTable = ExtractTableData<WeaponLadderData, WeaponLadderDataTable>(header, databaseBinary, options, xs => new WeaponLadderDataTable(xs));
            this.WeaponUpgradeMaterialDataTable = ExtractTableData<WeaponUpgradeMaterialData, WeaponUpgradeMaterialDataTable>(header, databaseBinary, options, xs => new WeaponUpgradeMaterialDataTable(xs));
        }

        void InitParallel(Dictionary<string, (int offset, int count)> header, System.ReadOnlyMemory<byte> databaseBinary, MessagePack.MessagePackSerializerOptions options, int maxDegreeOfParallelism)
        {
            var extracts = new Action[]
            {
                () => this.AchievementDataTable = ExtractTableData<AchievementData, AchievementDataTable>(header, databaseBinary, options, xs => new AchievementDataTable(xs)),
                () => this.AffinityDataTable = ExtractTableData<AffinityData, AffinityDataTable>(header, databaseBinary, options, xs => new AffinityDataTable(xs)),
                () => this.ArtifactDataTable = ExtractTableData<ArtifactData, ArtifactDataTable>(header, databaseBinary, options, xs => new ArtifactDataTable(xs)),
                () => this.ArtifactLadderDataTable = ExtractTableData<ArtifactLadderData, ArtifactLadderDataTable>(header, databaseBinary, options, xs => new ArtifactLadderDataTable(xs)),
                () => this.ArtifactUpgradeMaterialDataTable = ExtractTableData<ArtifactUpgradeMaterialData, ArtifactUpgradeMaterialDataTable>(header, databaseBinary, options, xs => new ArtifactUpgradeMaterialDataTable(xs)),
                () => this.BuildingDataTable = ExtractTableData<BuildingData, BuildingDataTable>(header, databaseBinary, options, xs => new BuildingDataTable(xs)),
                () => this.CurrencyDataTable = ExtractTableData<CurrencyData, CurrencyDataTable>(header, databaseBinary, options, xs => new CurrencyDataTable(xs)),
                () => this.ExpeditionDataTable = ExtractTableData<ExpeditionData, ExpeditionDataTable>(header, databaseBinary, options, xs => new ExpeditionDataTable(xs)),
                () => this.FactionDataTable = ExtractTableData<FactionData, FactionDataTable>(header, databaseBinary, options, xs => new FactionDataTable(xs)),
                () => this.HeroClassDataTable = ExtractTableData<HeroClassData, HeroClassDataTable>(header, databaseBinary, options, xs => new HeroClassDataTable(xs)),
                () => this.HeroDataTable = ExtractTableData<HeroData, HeroDataTable>(header, databaseBinary, options, xs => new HeroDataTable(xs)),
                () => this.HeroLadderDataTable = ExtractTableData<HeroLadderData, HeroLadderDataTable>(header, databaseBinary, options, xs => new HeroLadderDataTable(xs)),
                () => this.HeroSkinDataTable = ExtractTableData<HeroSkinData, HeroSkinDataTable>(header, databaseBinary, options, xs => new HeroSkinDataTable(xs)),
                () => this.HeroUpgradeMaterialDataTable = ExtractTableData<HeroUpgradeMaterialData, HeroUpgradeMaterialDataTable>(header, databaseBinary, options, xs => new HeroUpgradeMaterialDataTable(xs)),
                () => this.HeroWeaponSlotDataTable = ExtractTableData<HeroWeaponSlotData, HeroWeaponSlotDataTable>(header, databaseBinary, options, xs => new HeroWeaponSlotDataTable(xs)),
                () => this.QualityDataTable = ExtractTableData<QualityData, QualityDataTable>(header, databaseBinary, options, xs => new QualityDataTable(xs)),
                () => this.SkillDataTable = ExtractTableData<SkillData, SkillDataTable>(header, databaseBinary, options, xs => new SkillDataTable(xs)),
                () => this.WeaponDataTable = ExtractTableData<WeaponData, WeaponDataTable>(header, databaseBinary, options, xs => new WeaponDataTable(xs)),
                () => this.WeaponLadderDataTable = ExtractTableData<WeaponLadderData, WeaponLadderDataTable>(header, databaseBinary, options, xs => new WeaponLadderDataTable(xs)),
                () => this.WeaponUpgradeMaterialDataTable = ExtractTableData<WeaponUpgradeMaterialData, WeaponUpgradeMaterialDataTable>(header, databaseBinary, options, xs => new WeaponUpgradeMaterialDataTable(xs)),
            };
            
            System.Threading.Tasks.Parallel.Invoke(new System.Threading.Tasks.ParallelOptions
            {
                MaxDegreeOfParallelism = maxDegreeOfParallelism
            }, extracts);
        }

        public ImmutableBuilder ToImmutableBuilder()
        {
            return new ImmutableBuilder(this);
        }

        public DatabaseBuilder ToDatabaseBuilder()
        {
            var builder = new DatabaseBuilder();
            builder.Append(this.AchievementDataTable.GetRawDataUnsafe());
            builder.Append(this.AffinityDataTable.GetRawDataUnsafe());
            builder.Append(this.ArtifactDataTable.GetRawDataUnsafe());
            builder.Append(this.ArtifactLadderDataTable.GetRawDataUnsafe());
            builder.Append(this.ArtifactUpgradeMaterialDataTable.GetRawDataUnsafe());
            builder.Append(this.BuildingDataTable.GetRawDataUnsafe());
            builder.Append(this.CurrencyDataTable.GetRawDataUnsafe());
            builder.Append(this.ExpeditionDataTable.GetRawDataUnsafe());
            builder.Append(this.FactionDataTable.GetRawDataUnsafe());
            builder.Append(this.HeroClassDataTable.GetRawDataUnsafe());
            builder.Append(this.HeroDataTable.GetRawDataUnsafe());
            builder.Append(this.HeroLadderDataTable.GetRawDataUnsafe());
            builder.Append(this.HeroSkinDataTable.GetRawDataUnsafe());
            builder.Append(this.HeroUpgradeMaterialDataTable.GetRawDataUnsafe());
            builder.Append(this.HeroWeaponSlotDataTable.GetRawDataUnsafe());
            builder.Append(this.QualityDataTable.GetRawDataUnsafe());
            builder.Append(this.SkillDataTable.GetRawDataUnsafe());
            builder.Append(this.WeaponDataTable.GetRawDataUnsafe());
            builder.Append(this.WeaponLadderDataTable.GetRawDataUnsafe());
            builder.Append(this.WeaponUpgradeMaterialDataTable.GetRawDataUnsafe());
            return builder;
        }

        public DatabaseBuilder ToDatabaseBuilder(MessagePack.IFormatterResolver resolver)
        {
            var builder = new DatabaseBuilder(resolver);
            builder.Append(this.AchievementDataTable.GetRawDataUnsafe());
            builder.Append(this.AffinityDataTable.GetRawDataUnsafe());
            builder.Append(this.ArtifactDataTable.GetRawDataUnsafe());
            builder.Append(this.ArtifactLadderDataTable.GetRawDataUnsafe());
            builder.Append(this.ArtifactUpgradeMaterialDataTable.GetRawDataUnsafe());
            builder.Append(this.BuildingDataTable.GetRawDataUnsafe());
            builder.Append(this.CurrencyDataTable.GetRawDataUnsafe());
            builder.Append(this.ExpeditionDataTable.GetRawDataUnsafe());
            builder.Append(this.FactionDataTable.GetRawDataUnsafe());
            builder.Append(this.HeroClassDataTable.GetRawDataUnsafe());
            builder.Append(this.HeroDataTable.GetRawDataUnsafe());
            builder.Append(this.HeroLadderDataTable.GetRawDataUnsafe());
            builder.Append(this.HeroSkinDataTable.GetRawDataUnsafe());
            builder.Append(this.HeroUpgradeMaterialDataTable.GetRawDataUnsafe());
            builder.Append(this.HeroWeaponSlotDataTable.GetRawDataUnsafe());
            builder.Append(this.QualityDataTable.GetRawDataUnsafe());
            builder.Append(this.SkillDataTable.GetRawDataUnsafe());
            builder.Append(this.WeaponDataTable.GetRawDataUnsafe());
            builder.Append(this.WeaponLadderDataTable.GetRawDataUnsafe());
            builder.Append(this.WeaponUpgradeMaterialDataTable.GetRawDataUnsafe());
            return builder;
        }

#if !DISABLE_MASTERMEMORY_VALIDATOR

        public ValidateResult Validate()
        {
            var result = new ValidateResult();
            var database = new ValidationDatabase(new object[]
            {
                AchievementDataTable,
                AffinityDataTable,
                ArtifactDataTable,
                ArtifactLadderDataTable,
                ArtifactUpgradeMaterialDataTable,
                BuildingDataTable,
                CurrencyDataTable,
                ExpeditionDataTable,
                FactionDataTable,
                HeroClassDataTable,
                HeroDataTable,
                HeroLadderDataTable,
                HeroSkinDataTable,
                HeroUpgradeMaterialDataTable,
                HeroWeaponSlotDataTable,
                QualityDataTable,
                SkillDataTable,
                WeaponDataTable,
                WeaponLadderDataTable,
                WeaponUpgradeMaterialDataTable,
            });

            ((ITableUniqueValidate)AchievementDataTable).ValidateUnique(result);
            ValidateTable(AchievementDataTable.All, database, "Id", AchievementDataTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)AffinityDataTable).ValidateUnique(result);
            ValidateTable(AffinityDataTable.All, database, "Id", AffinityDataTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)ArtifactDataTable).ValidateUnique(result);
            ValidateTable(ArtifactDataTable.All, database, "Id", ArtifactDataTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)ArtifactLadderDataTable).ValidateUnique(result);
            ValidateTable(ArtifactLadderDataTable.All, database, "Id", ArtifactLadderDataTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)ArtifactUpgradeMaterialDataTable).ValidateUnique(result);
            ValidateTable(ArtifactUpgradeMaterialDataTable.All, database, "Id", ArtifactUpgradeMaterialDataTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)BuildingDataTable).ValidateUnique(result);
            ValidateTable(BuildingDataTable.All, database, "Id", BuildingDataTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)CurrencyDataTable).ValidateUnique(result);
            ValidateTable(CurrencyDataTable.All, database, "Id", CurrencyDataTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)ExpeditionDataTable).ValidateUnique(result);
            ValidateTable(ExpeditionDataTable.All, database, "Id", ExpeditionDataTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)FactionDataTable).ValidateUnique(result);
            ValidateTable(FactionDataTable.All, database, "Id", FactionDataTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)HeroClassDataTable).ValidateUnique(result);
            ValidateTable(HeroClassDataTable.All, database, "Id", HeroClassDataTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)HeroDataTable).ValidateUnique(result);
            ValidateTable(HeroDataTable.All, database, "Id", HeroDataTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)HeroLadderDataTable).ValidateUnique(result);
            ValidateTable(HeroLadderDataTable.All, database, "Id", HeroLadderDataTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)HeroSkinDataTable).ValidateUnique(result);
            ValidateTable(HeroSkinDataTable.All, database, "Id", HeroSkinDataTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)HeroUpgradeMaterialDataTable).ValidateUnique(result);
            ValidateTable(HeroUpgradeMaterialDataTable.All, database, "Id", HeroUpgradeMaterialDataTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)HeroWeaponSlotDataTable).ValidateUnique(result);
            ValidateTable(HeroWeaponSlotDataTable.All, database, "Id", HeroWeaponSlotDataTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)QualityDataTable).ValidateUnique(result);
            ValidateTable(QualityDataTable.All, database, "Id", QualityDataTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)SkillDataTable).ValidateUnique(result);
            ValidateTable(SkillDataTable.All, database, "Id", SkillDataTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)WeaponDataTable).ValidateUnique(result);
            ValidateTable(WeaponDataTable.All, database, "Id", WeaponDataTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)WeaponLadderDataTable).ValidateUnique(result);
            ValidateTable(WeaponLadderDataTable.All, database, "Id", WeaponLadderDataTable.PrimaryKeySelector, result);
            ((ITableUniqueValidate)WeaponUpgradeMaterialDataTable).ValidateUnique(result);
            ValidateTable(WeaponUpgradeMaterialDataTable.All, database, "Id", WeaponUpgradeMaterialDataTable.PrimaryKeySelector, result);

            return result;
        }

#endif

        static MasterMemory.Meta.MetaDatabase metaTable;

        public static object GetTable(MemoryDatabase db, string tableName)
        {
            switch (tableName)
            {
                case "achievement_data":
                    return db.AchievementDataTable;
                case "affinity_data":
                    return db.AffinityDataTable;
                case "artifact_data":
                    return db.ArtifactDataTable;
                case "artifact_ladder_data":
                    return db.ArtifactLadderDataTable;
                case "artifact_upgrade_material_data":
                    return db.ArtifactUpgradeMaterialDataTable;
                case "building_data":
                    return db.BuildingDataTable;
                case "currency_data":
                    return db.CurrencyDataTable;
                case "expedition_data":
                    return db.ExpeditionDataTable;
                case "faction_data":
                    return db.FactionDataTable;
                case "hero_class_data":
                    return db.HeroClassDataTable;
                case "hero_data":
                    return db.HeroDataTable;
                case "hero_ladder_data":
                    return db.HeroLadderDataTable;
                case "hero_skin_data":
                    return db.HeroSkinDataTable;
                case "hero_upgrade_material_data":
                    return db.HeroUpgradeMaterialDataTable;
                case "hero_weapon_slot_data":
                    return db.HeroWeaponSlotDataTable;
                case "quality_data":
                    return db.QualityDataTable;
                case "skill_data":
                    return db.SkillDataTable;
                case "weapon_data":
                    return db.WeaponDataTable;
                case "weapon_ladder_data":
                    return db.WeaponLadderDataTable;
                case "weapon_upgrade_material_data":
                    return db.WeaponUpgradeMaterialDataTable;
                
                default:
                    return null;
            }
        }

#if !DISABLE_MASTERMEMORY_METADATABASE

        public static MasterMemory.Meta.MetaDatabase GetMetaDatabase()
        {
            if (metaTable != null) return metaTable;

            var dict = new Dictionary<string, MasterMemory.Meta.MetaTable>();
            dict.Add("achievement_data", AlienCell.Shared.Data.Tables.AchievementDataTable.CreateMetaTable());
            dict.Add("affinity_data", AlienCell.Shared.Data.Tables.AffinityDataTable.CreateMetaTable());
            dict.Add("artifact_data", AlienCell.Shared.Data.Tables.ArtifactDataTable.CreateMetaTable());
            dict.Add("artifact_ladder_data", AlienCell.Shared.Data.Tables.ArtifactLadderDataTable.CreateMetaTable());
            dict.Add("artifact_upgrade_material_data", AlienCell.Shared.Data.Tables.ArtifactUpgradeMaterialDataTable.CreateMetaTable());
            dict.Add("building_data", AlienCell.Shared.Data.Tables.BuildingDataTable.CreateMetaTable());
            dict.Add("currency_data", AlienCell.Shared.Data.Tables.CurrencyDataTable.CreateMetaTable());
            dict.Add("expedition_data", AlienCell.Shared.Data.Tables.ExpeditionDataTable.CreateMetaTable());
            dict.Add("faction_data", AlienCell.Shared.Data.Tables.FactionDataTable.CreateMetaTable());
            dict.Add("hero_class_data", AlienCell.Shared.Data.Tables.HeroClassDataTable.CreateMetaTable());
            dict.Add("hero_data", AlienCell.Shared.Data.Tables.HeroDataTable.CreateMetaTable());
            dict.Add("hero_ladder_data", AlienCell.Shared.Data.Tables.HeroLadderDataTable.CreateMetaTable());
            dict.Add("hero_skin_data", AlienCell.Shared.Data.Tables.HeroSkinDataTable.CreateMetaTable());
            dict.Add("hero_upgrade_material_data", AlienCell.Shared.Data.Tables.HeroUpgradeMaterialDataTable.CreateMetaTable());
            dict.Add("hero_weapon_slot_data", AlienCell.Shared.Data.Tables.HeroWeaponSlotDataTable.CreateMetaTable());
            dict.Add("quality_data", AlienCell.Shared.Data.Tables.QualityDataTable.CreateMetaTable());
            dict.Add("skill_data", AlienCell.Shared.Data.Tables.SkillDataTable.CreateMetaTable());
            dict.Add("weapon_data", AlienCell.Shared.Data.Tables.WeaponDataTable.CreateMetaTable());
            dict.Add("weapon_ladder_data", AlienCell.Shared.Data.Tables.WeaponLadderDataTable.CreateMetaTable());
            dict.Add("weapon_upgrade_material_data", AlienCell.Shared.Data.Tables.WeaponUpgradeMaterialDataTable.CreateMetaTable());

            metaTable = new MasterMemory.Meta.MetaDatabase(dict);
            return metaTable;
        }

#endif
    }
}